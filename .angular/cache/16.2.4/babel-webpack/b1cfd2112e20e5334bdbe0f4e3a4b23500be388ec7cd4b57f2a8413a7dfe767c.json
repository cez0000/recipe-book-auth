{"ast":null,"code":"import { HttpClient } from \"@angular/common/http\";\nimport { catchError, tap } from \"rxjs/operators\";\nimport { BehaviorSubject, throwError } from \"rxjs\";\nimport { User } from \"./user.model\";\nimport { Router } from \"@angular/router\";\nimport { environment } from \"src/environments/environment\";\nimport * as i0 from \"@angular/core\";\nimport * as i1 from \"@angular/common/http\";\nimport * as i2 from \"@angular/router\";\nexport let AuthService = /*#__PURE__*/(() => {\n  class AuthService {\n    constructor(http, router) {\n      this.http = http;\n      this.router = router;\n      this.user = new BehaviorSubject(null);\n    }\n    signUp(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signUp?key=${environment.apiKey}`, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthtentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n    login(email, password) {\n      return this.http.post(`https://identitytoolkit.googleapis.com/v1/accounts:signInWithPassword?key=${environment.apiKey}`, {\n        email: email,\n        password: password,\n        returnSecureToken: true\n      }).pipe(catchError(this.handleError), tap(resData => {\n        this.handleAuthtentication(resData.email, resData.localId, resData.idToken, +resData.expiresIn);\n      }));\n    }\n    handleAuthtentication(email, id, token, expiredId) {\n      const expirationDate = new Date(new Date().getTime() + expiredId * 1000);\n      const user = new User(email, id, token, expirationDate);\n      this.user.next(user);\n      this.autoLogout(expiredId * 1000);\n      localStorage.setItem(\"userData\", JSON.stringify(user));\n    }\n    handleError(errorRes) {\n      let errorMessage = \"An unknown error occured!\";\n      if (!errorRes.error || errorRes.error.error) throwError(errorMessage);\n      switch (errorRes.error.error.message) {\n        case \"EMAIL_EXISTS\":\n          errorMessage = \"This email already exists!\";\n          break;\n        case \"EMAIL_NOT_FOUND\":\n          errorMessage = \"Email not found!\";\n          break;\n        case \"INVALID_PASSWORD\":\n          errorMessage = \"Password is invalid!\";\n      }\n      return throwError(errorMessage);\n    }\n    autoLogin() {\n      const userData = JSON.parse(localStorage.getItem(\"userData\"));\n      if (!userData) return;\n      const loadedUser = new User(userData.email, userData.id, userData._token, new Date(userData._tokenExpirationDate));\n      if (loadedUser.token) {\n        this.user.next(loadedUser);\n        const expirationTime = new Date(userData._tokenExpirationDate).getTime() - new Date().getTime();\n        this.autoLogout(expirationTime);\n      }\n    }\n    autoLogout(expiratiomDuration) {\n      this.logOutTimer = setTimeout(() => {\n        this.logout();\n      }, expiratiomDuration);\n    }\n    logout() {\n      this.user.next(null);\n      this.router.navigate([\"/auth\"]);\n      localStorage.clear();\n      if (this.logOutTimer) {\n        clearTimeout(this.logOutTimer);\n      }\n      this.logOutTimer = null;\n    }\n    static #_ = this.ɵfac = function AuthService_Factory(t) {\n      return new (t || AuthService)(i0.ɵɵinject(i1.HttpClient), i0.ɵɵinject(i2.Router));\n    };\n    static #_2 = this.ɵprov = /*@__PURE__*/i0.ɵɵdefineInjectable({\n      token: AuthService,\n      factory: AuthService.ɵfac,\n      providedIn: \"root\"\n    });\n  }\n  return AuthService;\n})();","map":null,"metadata":{},"sourceType":"module","externalDependencies":[]}